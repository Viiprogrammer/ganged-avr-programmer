
MasterMCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000015a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000787  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a6  00000000  00000000  00000987  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c4  00000000  00000000  0000102d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000005c  00000000  00000000  000012f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039b  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000094  00000000  00000000  000016eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000177f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	17 c0       	rjmp	.+46     	; 0x48 <__bad_interrupt>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>
  22:	12 c0       	rjmp	.+36     	; 0x48 <__bad_interrupt>
  24:	11 c0       	rjmp	.+34     	; 0x48 <__bad_interrupt>
  26:	10 c0       	rjmp	.+32     	; 0x48 <__bad_interrupt>

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf ef       	ldi	r28, 0xFF	; 255
  2e:	d2 e0       	ldi	r29, 0x02	; 2
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_clear_bss>:
  34:	21 e0       	ldi	r18, 0x01	; 1
  36:	a0 e0       	ldi	r26, 0x00	; 0
  38:	b1 e0       	ldi	r27, 0x01	; 1
  3a:	01 c0       	rjmp	.+2      	; 0x3e <.do_clear_bss_start>

0000003c <.do_clear_bss_loop>:
  3c:	1d 92       	st	X+, r1

0000003e <.do_clear_bss_start>:
  3e:	a1 30       	cpi	r26, 0x01	; 1
  40:	b2 07       	cpc	r27, r18
  42:	e1 f7       	brne	.-8      	; 0x3c <.do_clear_bss_loop>
  44:	31 d0       	rcall	.+98     	; 0xa8 <main>
  46:	4d c0       	rjmp	.+154    	; 0xe2 <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <InitBus>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include "main.h"

void InitBus () {
	DDRD |= _SET(PD3); // Clock
  4a:	8a b1       	in	r24, 0x0a	; 10
  4c:	88 60       	ori	r24, 0x08	; 8
  4e:	8a b9       	out	0x0a, r24	; 10
	DDRD |= _SET(PD4); // DATA 1
  50:	8a b1       	in	r24, 0x0a	; 10
  52:	80 61       	ori	r24, 0x10	; 16
  54:	8a b9       	out	0x0a, r24	; 10
	DDRD |= _SET(PD5); // DATA 2
  56:	8a b1       	in	r24, 0x0a	; 10
  58:	80 62       	ori	r24, 0x20	; 32
  5a:	8a b9       	out	0x0a, r24	; 10
	DDRD |= _SET(PD6); // DATA 3
  5c:	8a b1       	in	r24, 0x0a	; 10
  5e:	80 64       	ori	r24, 0x40	; 64
  60:	8a b9       	out	0x0a, r24	; 10
	DDRD |= _SET(PD7); // DATA 4
  62:	8a b1       	in	r24, 0x0a	; 10
  64:	80 68       	ori	r24, 0x80	; 128
  66:	8a b9       	out	0x0a, r24	; 10
	PORTD &=  _CLR(PD3) | _CLR(PD4) | _CLR(PD5) | _CLR(PD6) | _CLR(PD7);
  68:	8b b1       	in	r24, 0x0b	; 11
  6a:	8b b9       	out	0x0b, r24	; 11
  6c:	08 95       	ret

0000006e <clockBus>:
}

void clockBus () {
	PORTD |= _SET(PD3);
  6e:	8b b1       	in	r24, 0x0b	; 11
  70:	88 60       	ori	r24, 0x08	; 8
  72:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	8b e2       	ldi	r24, 0x2B	; 43
  76:	91 e0       	ldi	r25, 0x01	; 1
  78:	01 97       	sbiw	r24, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <clockBus+0xa>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <clockBus+0x10>
  7e:	00 00       	nop
	_delay_us(150);
	PORTD &= _CLR(PD3);
  80:	8b b1       	in	r24, 0x0b	; 11
  82:	87 7f       	andi	r24, 0xF7	; 247
  84:	8b b9       	out	0x0b, r24	; 11
  86:	08 95       	ret

00000088 <busTransferByte>:
}

void busTransferByte (uint8_t data) {
  88:	cf 93       	push	r28
  8a:	c8 2f       	mov	r28, r24
	PORTD = (data & 0b00001111) << 4;
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	82 95       	swap	r24
  90:	92 95       	swap	r25
  92:	90 7f       	andi	r25, 0xF0	; 240
  94:	98 27       	eor	r25, r24
  96:	80 7f       	andi	r24, 0xF0	; 240
  98:	98 27       	eor	r25, r24
  9a:	8b b9       	out	0x0b, r24	; 11
	clockBus();
  9c:	e8 df       	rcall	.-48     	; 0x6e <clockBus>
	PORTD = (data & 0b11110000);
  9e:	c0 7f       	andi	r28, 0xF0	; 240
  a0:	cb b9       	out	0x0b, r28	; 11
	clockBus();
  a2:	e5 df       	rcall	.-54     	; 0x6e <clockBus>
}
  a4:	cf 91       	pop	r28
  a6:	08 95       	ret

000000a8 <main>:

uint8_t n = 0;
int main(void)
{
	InitBus();
  a8:	d0 df       	rcall	.-96     	; 0x4a <InitBus>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	81 ee       	ldi	r24, 0xE1	; 225
  ae:	94 e0       	ldi	r25, 0x04	; 4
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x8>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x12>
  ba:	00 00       	nop
    _delay_ms(200);

    while (1) 
    {
		busTransferByte ((1 << n++));
  bc:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	89 0f       	add	r24, r25
  c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <main+0x26>
  cc:	88 0f       	add	r24, r24
  ce:	9a 95       	dec	r25
  d0:	ea f7       	brpl	.-6      	; 0xcc <main+0x24>
  d2:	da df       	rcall	.-76     	; 0x88 <busTransferByte>
		if (n == 8) { n = 0; }		
  d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d8:	88 30       	cpi	r24, 0x08	; 8
  da:	81 f7       	brne	.-32     	; 0xbc <main+0x14>
  dc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
  e0:	ed cf       	rjmp	.-38     	; 0xbc <main+0x14>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
